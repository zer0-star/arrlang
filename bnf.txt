PROGRAM ::= (V_DEC SEMICOLON | F_DEC | PROTOTYPE SEMICOLON)*
F_DEC ::= FUNC_KEYWORD LBRACKET (TYPE_LIST | TYPE) RARROW TYPE COLON VARIABLE RBRACKET LARROW (VARIABLE_LIST | VARIABLE) RARROW FUNCTION
PROTOTYPE ::= FUNC_KEYWORD LBRACKET (TYPE_LIST | TYPE) RARROW TYPE COLON VARIABLE RBRACKET
V_DEC ::= VAR_KEYWORD LBRACKET TYPE COLON VARIABLE RBRACKET (ep | LARROW EXPRESSION)
FUNCTION ::= LBRACE (V_DEC SEMICOLON)* SENTENCE* RBRACE
SENTENCE ::= (SEMICOLON | LBRACE SENTENCE* RBRACE | IF_FLOW | WHILE_FLOW | RETURN | CALL SEMICOLON | ASSIGN)
IF_FLOW ::= IF_KEYWORD LPAREN EXPRESSION RPAREN RARROW LBRACE SENTENCE* RBRACE (ELIF_KEYWORD LPAREN EXPRESSION RPAREN RARROW LBRACE SENTENCE* RBRACE)* (ep | ELSE_KEYWORD RARROW LBRACE SENTENCE* RBRACE)
WHILE_FLOW ::= WHILE_KEYWORD LPAREN EXPRESSION RPAREN RARROW LBRACE SENTENCE* RBRACE
RETURN ::= RETURN_KEYWORD LARROW EXPRESSION SEMICOLON
ASSIGN ::= VARIABLE LARROW EXPRESSION SEMICOLON
CALL ::= (EXPRESSION_LIST | EXPRESSION | VOID_KEYWORD) RARROW (VARIABLE | B_OPERATOR)
EXPRESSION_LIST ::= LPAREN EXPRESSION (COMMA EXPRESSION)* RPAREN
TYPE_LIST ::= LPAREN TYPE_KEYWORD (COMMA TYPE_KEYWORD )* RPAREN
VARIABLE_LIST ::= (VARIABLE | LPAREN VARIABLE (COMMA VARIABLE)* RPAREN)
TYPE ::= (VOID_KEYWORD | TYPE_KEYWORD)
EXPRESSION ::= (IMMEDIATE | CALL | VARIABLE)
IMMEDIATE ::= NUMBER
VARIABLE ::= IDENTIFY
B_OPERATOR ::= OPERATOR
